' uml/rubix_cube.puml

@startuml rubix_cube

' Define Color Enum
enum Color {
  +YELLOW
  +WHITE
  +BLUE
  +GREEN
  +RED
  +ORANGE
}

' Define Face Enum
enum Face {
  +U
  +D
  +F
  +B
  +R
  +L
}

' Define Piece Class
class Piece {
  #colors: dict
  #position: tuple
  #name: str

  +__init__(colors: dict, name: str, position: tuple)
  +__repr__(): str
  +get_position(): tuple
  +set_position(position: tuple)
  +get_faces(): dict
  +set_faces(colors: dict) 
}

' Define Center Class (inherits from Piece)
class Center {
  +__init__(colors: dict, name: str, position: tuple)
}

' Define Edge Class (inherits from Piece)
class Edge {
  +__init__(colors: dict, name: str, position: tuple)
}

' Define Corner Class (inherits from Piece)
class Corner {
  +__init__(colors: dict, name: str, position: tuple)
}

' Define Cube Class
class RubiksCube {
  #pieces: dict
  #matrix: list

  +__init__()
  +display()
  +_matrix()
  +get_face(face: Face)
  
  +U()
  +D()
  +F()
  +B()
  +R()
  +L()
  +U_prime()
  +D_prime()
  +F_prime()
  +B_prime()
  +R_prime()
  +L_prime()

  #_get_color(piece, face)
  #_rebuild_matrix()
  #_rearrange_pieces(keys: list)
  #_fetch_components(pieces: list)
  #_apply_components(pieces: list, components: list)
  #_rotate_components(components: list, f: str)
  #_rotate_pieces(pieces: list, face: str)
}

' Define Button Class
class Button {
  #rect
  #color
  #text
  #font

  +__init__(x, y, width, height, color, text, font_size)
  +draw(screen)
  +is_clicked(mouse_pos)
} 

' Define relationships between classes
Piece <|-- Center
Piece <|-- Edge
Piece <|-- Corner
RubiksCube o-- "many" Piece : contains

@enduml