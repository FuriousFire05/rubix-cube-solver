@startuml rubix_cube

skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor #2F495F
    Shadowing false
}

title Rubik's Cube Class Diagram

' Enums with exact values from colors.py and faces.py
enum Color <<enumeration>> {
    YELLOW = "#FFFF00"
    WHITE = "#FFFFFF"
    BLUE = "#0000FF"
    GREEN = "#00FF00"
    RED = "#FF0000"
    ORANGE = "#FFA500"
    __str__()
    __repr__()
}

enum Face <<enumeration>> {
    U = Color.YELLOW
    D = Color.WHITE
    F = Color.BLUE
    B = Color.GREEN
    R = Color.RED
    L = Color.ORANGE
    __str__()
    __repr__()
}

' Abstract Piece class with all methods from pieces.py
abstract class Piece {
    {field} - colors : Map<Color, Face>
    {field} - position : Tuple<Integer, Integer, Integer>
    {field} - name : String
    
    {method} + __init__(colors : Map<Color, Face>, name : String, position : Tuple<Integer, Integer, Integer>)
    {method} + get_position() : Tuple<Integer, Integer, Integer>
    {method} + set_position(position : Tuple<Integer, Integer, Integer>)
    {method} + get_faces() : Map<Color, Face>
    {method} + set_faces(colors : Map<Color, Face>)
    {method} + get_name() : String
    {method} + set_name(name : String)
    {method} + __repr__() : String
}

' Concrete Piece implementations with validation
class Center {
    {method} + __init__(colors, name, position)
    __validation__: colors.size() == 1
}

class Edge {
    {method} + __init__(colors, name, position)
    __validation__: colors.size() == 2
}

class Corner {
    {method} + __init__(colors, name, position)
    __validation__: colors.size() == 3
}

' Main Cube class with exact methods from cube.py
class RubiksCube {
    {field} - pieces : Map<String, Piece>
    {field} - matrix : List<List<List<Piece>>>
    {field} - move_history : List<String>
    
    {method} + __init__()
    {method} + display()
    {method} + print_matrix()
    {method} + get_face(face : Face) : List<List<String>>
    {method} + is_solved() : Boolean
    {method} + get_piece_at_position(x : Integer, y : Integer, z : Integer) : Piece
    {method} + find_piece_by_colors(colors : Color...) : Piece
    
    ' Rotation methods grouped by type
        
    {method} + U()
    {method} + D()
    {method} + F()
    {method} + B()
    {method} + R()
    {method} + L()
    
    {method} + U2()
    {method} + D2()
    {method} + F2()
    {method} + B2()
    {method} + R2()
    {method} + L2()
    
    {method} + U_prime()
    {method} + D_prime()
    {method} + F_prime()
    {method} + B_prime()
    {method} + R_prime()
    {method} + L_prime()
    
    ' Internal methods from cube.py

    {method} - _get_color(piece : Piece, face : Face) : String
    {method} - _rebuild_matrix()
    {method} - _rearrange_pieces(keys : List<String>)
    {method} - _fetch_components(pieces : List<String>) : List<List>>
    {method} - _apply_components(pieces : List<String>, components : List<List>>)
    {method} - _rotate_components(components : List<List>>, f : String) : List<List>>
    {method} - _rotate_pieces(pieces : List<String>, face : String)
}

' Scrambler class from scramble.py
class Scrambler {
    {field} - MOVES : List<String> = ["U", "U'", "U2", ..., "L2"]
    {field} - history : List<List<String>>
    
    {method} + generate_scramble(length : Integer = 20) : List<String>
    {method} + apply_scramble(cube : RubiksCube, scramble : List<String>)
}

' Inheritance relationships
Piece <|-- Center
Piece <|-- Edge
Piece <|-- Corner

' Composition/Usage relationships
RubiksCube "1" *-- "26" Piece : contains
RubiksCube ..> Scrambler : uses

' Documentation notes
note top of RubiksCube
  Physical 3x3x3 Cube Representation:
  - 6 Centers (1 color each)
  - 12 Edges (2 colors each)
  - 8 Corners (3 colors each)
  - Tracks complete move history
end note

note right of Scrambler
  Move Generation:
  - 18 possible moves (6 faces Ã— 3 variants)
  - No consecutive same-face moves
  - Complete scramble history
end note

note top of Piece
  Abstract Base Class for:
  - Centers (1 color)
  - Edges (2 colors)
  - Corners (3 colors)
end note

@enduml