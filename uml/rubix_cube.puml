@startuml rubix_cube

' Define Color Enum
enum Color {
  +YELLOW
  +WHITE
  +BLUE
  +GREEN
  +RED
  +ORANGE
  +__str__()
  +__repr__()
}

' Define Face Enum
enum Face {
  +U
  +D
  +F
  +B
  +R
  +L
  +__str__()
  +__repr__()
}

' Define Piece Class
class Piece {
  #colors: Dict[Color, Face]
  #position: Tuple[int, int, int]
  #name: str

  +__init__(colors: Dict[Color, Face], name: str, position: Tuple[int, int, int])
  +__repr__(): str
  +get_position(): Tuple[int, int, int]
  +set_position(position: Tuple[int, int, int])
  +get_faces(): Dict[Color, Face]
  +set_faces(colors: Dict[Color, Face])
  +get_name(): str
  +set_name(name: str)
}

' Define Center Class (inherits from Piece)
class Center {
  +__init__(colors: Dict[Color, Face], name: str, position: Tuple[int, int, int])
  +Validates exactly 1 color/face
}

' Define Edge Class (inherits from Piece)
class Edge {
  +__init__(colors: Dict[Color, Face], name: str, position: Tuple[int, int, int])
  +Validates exactly 2 colors/faces
}

' Define Corner Class (inherits from Piece)
class Corner {
  +__init__(colors: Dict[Color, Face], name: str, position: Tuple[int, int, int])
  +Validates exactly 3 colors/faces
}

' Define Cube Class
class RubiksCube {
  #pieces: Dict[str, Piece]
  #matrix: List[List[List[Optional[Piece]]]
  #move_history: List[str]

  +__init__()
  +display()
  +print_matrix()
  +get_face(face: Face): List[List[str]]
  +is_solved(): bool
  +get_piece_at_position(x: int, y: int, z: int): Optional[Piece]
  +find_piece_by_colors(*colors: Color): Optional[Piece]
  
  ' Basic moves
  +U()
  +D()
  +F()
  +B()
  +R()
  +L()
  
  ' Double moves
  +U2()
  +D2()
  +F2()
  +B2()
  +R2()
  +L2()
  
  ' Prime moves
  +U_prime()
  +D_prime()
  +F_prime()
  +B_prime()
  +R_prime()
  +L_prime()

  ' Protected methods
  #_get_color(piece: Optional[Piece], face: Face): str
  #_rebuild_matrix()
  #_rearrange_pieces(keys: List[str])
  #_fetch_components(pieces: List[str]): List[List]
  #_apply_components(pieces: List[str], components: List[List])
  #_rotate_components(components: List[List], f: str): List[List]
  #_rotate_pieces(pieces: List[str], face: str)
}

' Define Scrambler Class
class Scrambler {
  #MOVES: List[str]
  #history: List[List[str]]

  +__init__()
  +generate_scramble(length: int = 20): List[str]
  +apply_scramble(cube: RubiksCube, scramble: List[str])
}

' Define relationships between classes
Piece <|-- Center
Piece <|-- Edge
Piece <|-- Corner
RubiksCube o-- "*" Piece : contains
RubiksCube --> Scrambler : uses

note top of RubiksCube
  Contains 26 pieces:
  - 6 Centers
  - 12 Edges
  - 8 Corners
end note

note top of Scrambler
  Generates valid scrambles:
  - No consecutive same-face moves
  - Tracks history
end note

@enduml